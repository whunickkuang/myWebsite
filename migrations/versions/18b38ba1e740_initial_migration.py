"""initial migration

Revision ID: 18b38ba1e740
Revises: None
Create Date: 2015-10-15 13:19:43.110000

"""

# revision identifiers, used by Alembic.
revision = '18b38ba1e740'
down_revision = None

from alembic import op
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bp_user',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('user_email', sa.String(length=64), nullable=True),
    sa.Column('user_may_email', sa.String(length=64), nullable=True),
    sa.Column('user_name', sa.String(length=64), nullable=True),
    sa.Column('user_password_hash', sa.String(length=128), nullable=True),
    sa.Column('user_confirmed', sa.Boolean(), nullable=True),
    sa.Column('user_range', sa.Float(), nullable=True),
    sa.Column('user_company', sa.String(length=64), nullable=True),
    sa.Column('user_role_type', sa.String(length=64), nullable=True),
    sa.Column('user_phone', sa.String(length=32), nullable=True),
    sa.Column('user_pieces', sa.Integer(), nullable=True),
    sa.Column('user_pieces_left', sa.Integer(), nullable=True),
    sa.Column('user_member_since', sa.DateTime(), nullable=True),
    sa.Column('user_last_seen', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_bp_user_user_email'), 'bp_user', ['user_email'], unique=True)
    op.create_index(op.f('ix_bp_user_user_name'), 'bp_user', ['user_name'], unique=False)
    op.create_table('bp_project',
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('project_name', sa.String(length=64), nullable=True),
    sa.Column('project_pieces', sa.Integer(), nullable=True),
    sa.Column('project_pieces_left', sa.Integer(), nullable=True),
    sa.Column('project_status', sa.String(length=64), nullable=True),
    sa.Column('project_introduction', sa.String(length=256), nullable=True),
    sa.Column('project_url', sa.String(length=1024), nullable=True),
    sa.Column('project_v_range', sa.Float(), nullable=True),
    sa.Column('project_s_range', sa.Float(), nullable=True),
    sa.Column('project_owner', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['project_owner'], ['bp_user.user_id'], ),
    sa.PrimaryKeyConstraint('project_id')
    )
    op.create_index(op.f('ix_bp_project_project_name'), 'bp_project', ['project_name'], unique=False)
    op.create_table('bp_bed_box',
    sa.Column('bed_id', sa.Integer(), nullable=False),
    sa.Column('bed_project_id', sa.Integer(), nullable=True),
    sa.Column('bed_name', sa.String(length=64), nullable=True),
    sa.Column('bed_startTime', sa.DateTime(), nullable=True),
    sa.Column('bed_default_period', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['bed_project_id'], ['bp_project.project_id'], ),
    sa.PrimaryKeyConstraint('bed_id')
    )
    op.create_table('bp_user_projects',
    sa.Column('user_project_user_id', sa.Integer(), nullable=False),
    sa.Column('user_project_project_id', sa.Integer(), nullable=False),
    sa.Column('user_project_permission', sa.Integer(), nullable=True),
    sa.Column('user_project_role', sa.String(length=64), nullable=True),
    sa.ForeignKeyConstraint(['user_project_project_id'], ['bp_project.project_id'], ),
    sa.ForeignKeyConstraint(['user_project_user_id'], ['bp_user.user_id'], ),
    sa.PrimaryKeyConstraint('user_project_user_id', 'user_project_project_id')
    )
    op.create_table('bp_model',
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('model_number', sa.String(length=128), nullable=True),
    sa.Column('model_name', sa.String(length=128), nullable=True),
    sa.Column('model_pieces', sa.Integer(), nullable=True),
    sa.Column('model_filePath', sa.String(length=128), nullable=True),
    sa.Column('model_file_name', sa.String(length=128), nullable=True),
    sa.Column('model_status', sa.String(length=32), nullable=True),
    sa.Column('model_offset', sa.Float(), nullable=True),
    sa.Column('model_cross', sa.String(length=32), nullable=True),
    sa.Column('model_evaluation', sa.Float(), nullable=True),
    sa.Column('model_actual_startTime', sa.DateTime(), nullable=True),
    sa.Column('model_actual_endTime', sa.DateTime(), nullable=True),
    sa.Column('model_in_bedOrder', sa.Integer(), nullable=True),
    sa.Column('model_expect_startTime', sa.DateTime(), nullable=True),
    sa.Column('model_expect_endTime', sa.DateTime(), nullable=True),
    sa.Column('model_v_range', sa.Float(), nullable=True),
    sa.Column('model_s_range', sa.Float(), nullable=True),
    sa.Column('model_bed_id', sa.Integer(), nullable=True),
    sa.Column('model_project_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['model_bed_id'], ['bp_bed_box.bed_id'], ),
    sa.ForeignKeyConstraint(['model_project_id'], ['bp_project.project_id'], ),
    sa.PrimaryKeyConstraint('model_id')
    )
    op.create_index(op.f('ix_bp_model_model_number'), 'bp_model', ['model_number'], unique=True)
    op.create_table('bp_node',
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('node_number', sa.Integer(), nullable=True),
    sa.Column('node_x_coord', sa.Float(), nullable=True),
    sa.Column('node_y_coord', sa.Float(), nullable=True),
    sa.Column('node_z_coord', sa.Float(), nullable=True),
    sa.Column('node_x_after_camber', sa.Float(), nullable=True),
    sa.Column('node_y_after_camber', sa.Float(), nullable=True),
    sa.Column('node_z_after_camber', sa.Float(), nullable=True),
    sa.Column('node_surveyed_x_coord', sa.Float(), nullable=True),
    sa.Column('node_surveyed_y_coord', sa.Float(), nullable=True),
    sa.Column('node_surveyed_z_coord', sa.Float(), nullable=True),
    sa.Column('node_surveyed_x_after_camber', sa.Float(), nullable=True),
    sa.Column('node_surveyed_y_after_camber', sa.Float(), nullable=True),
    sa.Column('node_surveyed_z_after_camber', sa.Float(), nullable=True),
    sa.Column('node_camber_x_coord', sa.Float(), nullable=True),
    sa.Column('node_camber_y_coord', sa.Float(), nullable=True),
    sa.Column('node_camber_z_coord', sa.Float(), nullable=True),
    sa.Column('node_camber_phi_x', sa.Float(), nullable=True),
    sa.Column('node_camber_phi_y', sa.Float(), nullable=True),
    sa.Column('node_camber_phi_z', sa.Float(), nullable=True),
    sa.Column('node_model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['node_model_id'], ['bp_model.model_id'], ),
    sa.PrimaryKeyConstraint('node_id')
    )
    op.create_table('bp_control_line_data',
    sa.Column('control_line_data_id', sa.Integer(), nullable=False),
    sa.Column('control_line_data_model_id', sa.Integer(), nullable=True),
    sa.Column('control_line_data_name', sa.String(length=32), nullable=True),
    sa.Column('control_line_data_content', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['control_line_data_model_id'], ['bp_model.model_id'], ),
    sa.PrimaryKeyConstraint('control_line_data_id')
    )
    op.create_table('bp_cross_session',
    sa.Column('cross_section_id', sa.Integer(), nullable=False),
    sa.Column('cross_section_name', sa.String(length=32), nullable=True),
    sa.Column('cross_section_model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cross_section_model_id'], ['bp_model.model_id'], ),
    sa.PrimaryKeyConstraint('cross_section_id')
    )
    op.create_table('bp_cross_section_point',
    sa.Column('cross_section_point_id', sa.Integer(), nullable=False),
    sa.Column('point_name', sa.String(length=32), nullable=True),
    sa.Column('point_x', sa.Float(), nullable=True),
    sa.Column('point_y', sa.Float(), nullable=True),
    sa.Column('point_position', sa.String(length=32), nullable=True),
    sa.Column('point_direction', sa.String(length=32), nullable=True),
    sa.Column('cross_section_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cross_section_id'], ['bp_cross_session.cross_section_id'], ),
    sa.PrimaryKeyConstraint('cross_section_point_id')
    )
    op.create_table('bp_segment',
    sa.Column('segment_id', sa.Integer(), nullable=False),
    sa.Column('segment_number', sa.Integer(), nullable=True),
    sa.Column('segment_matching_id', sa.Integer(), nullable=True),
    sa.Column('segment_match_direction', sa.String(length=32), nullable=True),
    sa.Column('segment_status', sa.String(length=32), nullable=True),
    sa.Column('segment_casted_date', sa.String(length=128), nullable=True),
    sa.Column('segment_start_node', sa.Integer(), nullable=True),
    sa.Column('segment_end_node', sa.Integer(), nullable=True),
    sa.Column('segment_left_offset', sa.Float(), nullable=True),
    sa.Column('segment_right_offset', sa.Float(), nullable=True),
    sa.Column('segment_down_offset', sa.Float(), nullable=True),
    sa.Column('segment_model_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['segment_end_node'], ['bp_node.node_id'], ),
    sa.ForeignKeyConstraint(['segment_model_id'], ['bp_model.model_id'], ),
    sa.ForeignKeyConstraint(['segment_start_node'], ['bp_node.node_id'], ),
    sa.PrimaryKeyConstraint('segment_id')
    )
    op.create_table('bp_surveyed_data',
    sa.Column('surveyed_data_id', sa.Integer(), nullable=False),
    sa.Column('surveyed_data_number', sa.String(length=128), nullable=True),
    sa.Column('surveyed_data_GP_data', sa.Text(), nullable=True),
    sa.Column('surveyed_data_status', sa.String(length=32), nullable=True),
    sa.Column('surveyed_data_time', sa.String(length=128), nullable=True),
    sa.Column('is_first_segment_surveyed_data', sa.Boolean(), nullable=True),
    sa.Column('float_bulkhead_GP_R_offset', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_R_elevation', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_R_length', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_C_offset', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_C_elevation', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_C_length', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_L_offset', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_L_elevation', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_L_length', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_R_length_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_C_length_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_L_length_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_end_match', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_end_match', sa.Float(), nullable=True),
    sa.Column('GP_R_length_end_match', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_end_match', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_end_match', sa.Float(), nullable=True),
    sa.Column('GP_C_length_end_match', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_end_match', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_end_match', sa.Float(), nullable=True),
    sa.Column('GP_L_length_end_match', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_begin', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_begin', sa.Float(), nullable=True),
    sa.Column('GP_R_length_begin', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_begin', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_begin', sa.Float(), nullable=True),
    sa.Column('GP_C_length_begin', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_begin', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_begin', sa.Float(), nullable=True),
    sa.Column('GP_L_length_begin', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_end', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_end', sa.Float(), nullable=True),
    sa.Column('GP_R_length_end', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_end', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_end', sa.Float(), nullable=True),
    sa.Column('GP_C_length_end', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_end', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_end', sa.Float(), nullable=True),
    sa.Column('GP_L_length_end', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_R_offset', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_R_elevation', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_C_offset', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_C_elevation', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_L_offset', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_L_elevation', sa.Float(), nullable=True),
    sa.Column('matched_surveyed_data_id', sa.String(length=128), nullable=True),
    sa.Column('filename', sa.String(length=128), nullable=True),
    sa.Column('surveyed_data_upload_user', sa.Integer(), nullable=True),
    sa.Column('surveyed_data_upload_checker', sa.Integer(), nullable=True),
    sa.Column('surveyed_data_model_id', sa.Integer(), nullable=True),
    sa.Column('surveyed_data_project_id', sa.Integer(), nullable=True),
    sa.Column('surveyed_data_segment_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['surveyed_data_model_id'], ['bp_model.model_id'], ),
    sa.ForeignKeyConstraint(['surveyed_data_project_id'], ['bp_project.project_id'], ),
    sa.ForeignKeyConstraint(['surveyed_data_segment_id'], ['bp_segment.segment_id'], ),
    sa.PrimaryKeyConstraint('surveyed_data_id')
    )
    op.create_table('bp_segment_cross_section',
    sa.Column('segment_cross_section_id', sa.Integer(), nullable=False),
    sa.Column('segment_cross__model_id', sa.Integer(), nullable=True),
    sa.Column('segment_cross_section_segment_id', sa.Integer(), nullable=True),
    sa.Column('segment_cross_section_cross_section_id', sa.Integer(), nullable=True),
    sa.Column('segment_position', sa.String(length=32), nullable=True),
    sa.ForeignKeyConstraint(['segment_cross__model_id'], ['bp_model.model_id'], ),
    sa.ForeignKeyConstraint(['segment_cross_section_cross_section_id'], ['bp_cross_session.cross_section_id'], ),
    sa.ForeignKeyConstraint(['segment_cross_section_segment_id'], ['bp_segment.segment_id'], ),
    sa.PrimaryKeyConstraint('segment_cross_section_id')
    )
    op.create_table('bp_construction_order',
    sa.Column('construction_order_id', sa.Integer(), nullable=False),
    sa.Column('construction_order_number', sa.String(length=128), nullable=True),
    sa.Column('construction_order_time', sa.String(length=128), nullable=True),
    sa.Column('is_first_segment_construction_order', sa.Boolean(), nullable=True),
    sa.Column('float_bulkhead_GP_R_offset', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_R_elevation', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_R_length', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_C_offset', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_C_elevation', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_C_length', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_L_offset', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_L_elevation', sa.Float(), nullable=True),
    sa.Column('float_bulkhead_GP_L_length', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_R_length_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_C_length_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_L_length_begin_match', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_end_match', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_end_match', sa.Float(), nullable=True),
    sa.Column('GP_R_length_end_match', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_end_match', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_end_match', sa.Float(), nullable=True),
    sa.Column('GP_C_length_end_match', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_end_match', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_end_match', sa.Float(), nullable=True),
    sa.Column('GP_L_length_end_match', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_begin', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_begin', sa.Float(), nullable=True),
    sa.Column('GP_R_length_begin', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_begin', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_begin', sa.Float(), nullable=True),
    sa.Column('GP_C_length_begin', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_begin', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_begin', sa.Float(), nullable=True),
    sa.Column('GP_L_length_begin', sa.Float(), nullable=True),
    sa.Column('GP_R_offset_end', sa.Float(), nullable=True),
    sa.Column('GP_R_elevation_end', sa.Float(), nullable=True),
    sa.Column('GP_R_length_end', sa.Float(), nullable=True),
    sa.Column('GP_C_offset_end', sa.Float(), nullable=True),
    sa.Column('GP_C_elevation_end', sa.Float(), nullable=True),
    sa.Column('GP_C_length_end', sa.Float(), nullable=True),
    sa.Column('GP_L_offset_end', sa.Float(), nullable=True),
    sa.Column('GP_L_elevation_end', sa.Float(), nullable=True),
    sa.Column('GP_L_length_end', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_R_offset', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_R_elevation', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_C_offset', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_C_elevation', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_L_offset', sa.Float(), nullable=True),
    sa.Column('bulkhead_GP_L_elevation', sa.Float(), nullable=True),
    sa.Column('filename', sa.String(length=128), nullable=True),
    sa.Column('construction_order_model_id', sa.Integer(), nullable=True),
    sa.Column('construction_order_project_id', sa.Integer(), nullable=True),
    sa.Column('construction_order_segment_id', sa.Integer(), nullable=True),
    sa.Column('construction_order_GP_data', sa.Text(), nullable=True),
    sa.Column('construction_order_status', sa.String(length=32), nullable=True),
    sa.ForeignKeyConstraint(['construction_order_model_id'], ['bp_model.model_id'], ),
    sa.ForeignKeyConstraint(['construction_order_project_id'], ['bp_project.project_id'], ),
    sa.ForeignKeyConstraint(['construction_order_segment_id'], ['bp_segment.segment_id'], ),
    sa.PrimaryKeyConstraint('construction_order_id')
    )
    op.create_index(op.f('ix_bp_construction_order_construction_order_number'), 'bp_construction_order', ['construction_order_number'], unique=True)
    op.create_table('bp_segment_data',
    sa.Column('segment_data_id', sa.Integer(), nullable=False),
    sa.Column('segment_id', sa.Integer(), nullable=True),
    sa.Column('is_offset', sa.Boolean(), nullable=True),
    sa.Column('is_camber', sa.Boolean(), nullable=True),
    sa.Column('is_theoretical_value', sa.Boolean(), nullable=True),
    sa.Column('segment_B_GP_C_X', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_C_Y', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_C_Z', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_L_X', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_L_Y', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_L_Z', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_R_X', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_R_Y', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_R_Z', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_D_X', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_D_Y', sa.Float(), nullable=True),
    sa.Column('segment_B_GP_D_Z', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_C_X', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_C_Y', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_C_Z', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_L_X', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_L_Y', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_L_Z', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_R_X', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_R_Y', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_R_Z', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_D_X', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_D_Y', sa.Float(), nullable=True),
    sa.Column('segment_E_GP_D_Z', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['segment_id'], ['bp_segment.segment_id'], ),
    sa.PrimaryKeyConstraint('segment_data_id')
    )
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bp_segment_data')
    op.drop_index(op.f('ix_bp_construction_order_construction_order_number'), table_name='bp_construction_order')
    op.drop_table('bp_construction_order')
    op.drop_table('bp_segment_cross_section')
    op.drop_table('bp_surveyed_data')
    op.drop_table('bp_segment')
    op.drop_table('bp_cross_section_point')
    op.drop_table('bp_cross_session')
    op.drop_table('bp_control_line_data')
    op.drop_table('bp_node')
    op.drop_index(op.f('ix_bp_model_model_number'), table_name='bp_model')
    op.drop_table('bp_model')
    op.drop_table('bp_user_projects')
    op.drop_table('bp_bed_box')
    op.drop_index(op.f('ix_bp_project_project_name'), table_name='bp_project')
    op.drop_table('bp_project')
    op.drop_index(op.f('ix_bp_user_user_name'), table_name='bp_user')
    op.drop_index(op.f('ix_bp_user_user_email'), table_name='bp_user')
    op.drop_table('bp_user')
    ### end Alembic commands ###
